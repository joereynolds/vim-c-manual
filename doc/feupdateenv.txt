*feupdateenv.txt*
*feupdateenv*

7.6.4.4 The feupdateenv function

==============================================================================
Synopsis
1

#include <fenv.h>
int feupdateenv(const fenv_t *envp);

==============================================================================
Description

2

The feupdateenv function attempts to save the currently raised floating-point
exceptions in its automatic storage, install the floating-point environment represented by
the object pointed to by envp, and then raise the saved floating-point exceptions. The
argument envp shall point to an object set by a call to feholdexcept or fegetenv,
or equal a floating-point environment macro.

==============================================================================
Returns

3

The feupdateenv function returns zero if all the actions were successfully carried out.
Otherwise, it returns a nonzero value.

218) IEC 60559 systems have a default non-stop mode, and typically at least one other mode for trap
handling or aborting; if the system provides only the non-stop mode then installing it is trivial. For
such systems, the feholdexcept function can be used in conjunction with the feupdateenv
function to write routines that hide spurious floating-point exceptions from their callers.

214

Library

§7.6.4.4

N1570

4

Committee Draft — April 12, 2011

EXAMPLE

ISO/IEC 9899:201x

Hide spurious underflow floating-point exceptions:

#include <fenv.h>
double f(double x)
{
#pragma STDC FENV_ACCESS ON
double result;
fenv_t save_env;
if (feholdexcept(&save_env))
return /* indication of an environmental problem */;
// compute result
if (/* test spurious underflow */)
if (feclearexcept(FE_UNDERFLOW))
return /* indication of an environmental problem */;
if (feupdateenv(&save_env))
return /* indication of an environmental problem */;
return result;
}

§7.6.4.4

Library

215

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.7 Characteristics of floating types <float.h>
1

The header <float.h> defines several macros that expand to various limits and
parameters of the standard floating-point types.

2

The macros, their meanings, and the constraints (or restrictions) on their values are listed
in 5.2.4.2.2.

216

Library

§7.7

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

7.8 Format conversion of integer types <inttypes.h>
1

The header <inttypes.h> includes the header <stdint.h> and extends it with
additional facilities provided by hosted implementations.

2

It declares functions for manipulating greatest-width integers and converting numeric
character strings to greatest-width integers, and it declares the type
imaxdiv_t
which is a structure type that is the type of the value returned by the imaxdiv function.
For each type declared in <stdint.h>, it defines corresponding macros for conversion
specifiers for use with the formatted input/output functions.219)
Forward references: integer types <stdint.h> (7.20), formatted input/output
functions (7.21.6), formatted wide character input/output functions (7.29.2).

7.8.1 Macros for format specifiers
1

Each of the following object-like macros expands to a character string literal containing a
conversion specifier, possibly modified by a length modifier, suitable for use within the
format argument of a formatted input/output function when converting the corresponding
integer type. These macro names have the general form of PRI (character string literals
for the fprintf and fwprintf family) or SCN (character string literals for the
fscanf and fwscanf family),220) followed by the conversion specifier, followed by a
name corresponding to a similar type name in 7.20.1. In these names, N represents the
width of the type as described in 7.20.1. For example, PRIdFAST32 can be used in a
format string to print the value of an integer of type int_fast32_t.

2

The fprintf macros for signed integers are:
PRIdN
PRIiN

3

PRIdFASTN
PRIiFASTN

PRIdMAX
PRIiMAX

PRIdPTR
PRIiPTR

PRIoMAX
PRIuMAX
PRIxMAX
PRIXMAX

PRIoPTR
PRIuPTR
PRIxPTR
PRIXPTR

The fprintf macros for unsigned integers are:
PRIoN
PRIuN
PRIxN
PRIXN

4

PRIdLEASTN
PRIiLEASTN

PRIoLEASTN
PRIuLEASTN
PRIxLEASTN
PRIXLEASTN

PRIoFASTN
PRIuFASTN
PRIxFASTN
PRIXFASTN

The fscanf macros for signed integers are:

219) See ‘‘future library directions’’ (7.31.5).
220) Separate macros are given for use with fprintf and fscanf functions because, in the general case,
different format specifiers may be required for fprintf and fscanf, even when the type is the
same.

§7.8.1

Library

217

ISO/IEC 9899:201x

SCNdN
SCNiN
5

Committee Draft — April 12, 2011

SCNdLEASTN
SCNiLEASTN

SCNdFASTN
SCNiFASTN

N1570

SCNdMAX
SCNiMAX

SCNdPTR
SCNiPTR

SCNoMAX
SCNuMAX
SCNxMAX

SCNoPTR
SCNuPTR
SCNxPTR

The fscanf macros for unsigned integers are:
SCNoN
SCNuN
SCNxN

SCNoLEASTN
SCNuLEASTN
SCNxLEASTN

SCNoFASTN
SCNuFASTN
SCNxFASTN

6

For each type that the implementation provides in <stdint.h>, the corresponding
fprintf macros shall be defined and the corresponding fscanf macros shall be
defined unless the implementation does not have a suitable fscanf length modifier for
the type.

7

EXAMPLE
#include <inttypes.h>
#include <wchar.h>
int main(void)
{
uintmax_t i = UINTMAX_MAX;
// this type always exists
wprintf(L"The largest integer value is %020"
PRIxMAX "\n", i);
return 0;
}

7.8.2 Functions for greatest-width integer types



vim:tw=78:ts=8:ft=help:norl: