*wcrtomb.txt*
*wcrtomb*

7.29.6.3.3 The wcrtomb function

==============================================================================
Synopsis
1

#include <wchar.h>
size_t wcrtomb(char * restrict s,
wchar_t wc,
mbstate_t * restrict ps);

==============================================================================
Description

2

If s is a null pointer, the wcrtomb function is equivalent to the call
wcrtomb(buf, L'\0', ps)
where buf is an internal buffer.

3

If s is not a null pointer, the wcrtomb function determines the number of bytes needed
to represent the multibyte character that corresponds to the wide character given by wc
(including any shift sequences), and stores the multibyte character representation in the
array whose first element is pointed to by s. At most MB_CUR_MAX bytes are stored. If
wc is a null wide character, a null byte is stored, preceded by any shift sequence needed
to restore the initial shift state; the resulting state described is the initial conversion state.

==============================================================================
Returns

4

The wcrtomb function returns the number of bytes stored in the array object (including
any shift sequences). When wc is not a valid wide character, an encoding error occurs:
the function stores the value of the macro EILSEQ in errno and returns
(size_t)(-1); the conversion state is unspecified.

7.29.6.4 Restartable multibyte/wide string conversion functions
1

These functions differ from the corresponding multibyte string functions of 7.22.8
(mbstowcs and wcstombs) in that they have an extra parameter, ps, of type pointer to
mbstate_t that points to an object that can completely describe the current conversion
state of the associated multibyte character sequence. If ps is a null pointer, each function
uses its own internal mbstate_t object instead, which is initialized at program startup
to the initial conversion state; the functions are not required to avoid data races with other
calls to the same function in this case. The implementation behaves as if no library
function calls these functions with a null pointer for ps.

2

Also unlike their corresponding functions, the conversion source parameter, src, has a
pointer-to-pointer type. When the function is storing the results of conversions (that is,
when dst is not a null pointer), the pointer object pointed to by this parameter is updated
to reflect the amount of the source processed by that invocation.

444

Library

ยง7.29.6.4

N1570





vim:tw=78:ts=8:ft=help:norl: