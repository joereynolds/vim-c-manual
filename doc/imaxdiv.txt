*imaxdiv.txt*
*imaxdiv*

7.8.2.2 The imaxdiv function

==============================================================================
Synopsis
1

#include <inttypes.h>
imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);

==============================================================================
Description

2

The imaxdiv function computes numer / denom and numer % denom in a single
operation.

==============================================================================
Returns

3

The imaxdiv function returns a structure of type imaxdiv_t comprising both the
quotient and the remainder. The structure shall contain (in either order) the members
quot (the quotient) and rem (the remainder), each of which has type intmax_t. If
either part of the result cannot be represented, the behavior is undefined.

7.8.2.3 The strtoimax and strtoumax functions

==============================================================================
Synopsis
1

#include <inttypes.h>
intmax_t strtoimax(const char * restrict nptr,
char ** restrict endptr, int base);
uintmax_t strtoumax(const char * restrict nptr,
char ** restrict endptr, int base);

==============================================================================
Description

2

The strtoimax and strtoumax functions are equivalent to the strtol, strtoll,
strtoul, and strtoull functions, except that the initial portion of the string is
converted to intmax_t and uintmax_t representation, respectively.

==============================================================================
Returns

3

The strtoimax and strtoumax functions return the converted value, if any. If no
conversion could be performed, zero is returned. If the correct value is outside the range
of representable values, INTMAX_MAX, INTMAX_MIN, or UINTMAX_MAX is returned
(according to the return type and sign of the value, if any), and the value of the macro
ERANGE is stored in errno.
Forward references: the strtol, strtoll, strtoul, and strtoull functions
(7.22.1.4).

§7.8.2.3

Library

219

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.8.2.4 The wcstoimax and wcstoumax functions

==============================================================================
Synopsis
1

#include <stddef.h>
// for wchar_t
#include <inttypes.h>
intmax_t wcstoimax(const wchar_t * restrict nptr,
wchar_t ** restrict endptr, int base);
uintmax_t wcstoumax(const wchar_t * restrict nptr,
wchar_t ** restrict endptr, int base);

==============================================================================
Description

2

The wcstoimax and wcstoumax functions are equivalent to the wcstol, wcstoll,
wcstoul, and wcstoull functions except that the initial portion of the wide string is
converted to intmax_t and uintmax_t representation, respectively.

==============================================================================
Returns

3

The wcstoimax function returns the converted value, if any. If no conversion could be
performed, zero is returned. If the correct value is outside the range of representable
values, INTMAX_MAX, INTMAX_MIN, or UINTMAX_MAX is returned (according to the
return type and sign of the value, if any), and the value of the macro ERANGE is stored in
errno.
Forward references: the wcstol, wcstoll, wcstoul, and wcstoull functions
(7.29.4.1.2).

220

Library

§7.8.2.4

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

7.9 Alternative spellings <iso646.h>
1

The header <iso646.h> defines the following eleven macros (on the left) that expand
to the corresponding tokens (on the right):
and
and_eq
bitand
bitor
compl
not
not_eq
or
or_eq
xor
xor_eq

§7.9

&&
&=
&
|
~
!
!=
||
|=
^
^=

Library

221

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.10 Sizes of integer types <limits.h>
1

The header <limits.h> defines several macros that expand to various limits and
parameters of the standard integer types.

2

The macros, their meanings, and the constraints (or restrictions) on their values are listed
in 5.2.4.2.1.

222

Library

§7.10

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

7.11 Localization <locale.h>
1

The header <locale.h> declares two functions, one type, and defines several macros.

2

The type is
struct lconv
which contains members related to the formatting of numeric values. The structure shall
contain at least the following members, in any order. The semantics of the members and
their normal ranges are explained in 7.11.2.1. In the "C" locale, the members shall have
the values specified in the comments.
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char
char

§7.11

*decimal_point;
*thousands_sep;
*grouping;
*mon_decimal_point;
*mon_thousands_sep;
*mon_grouping;
*positive_sign;
*negative_sign;
*currency_symbol;
frac_digits;
p_cs_precedes;
n_cs_precedes;
p_sep_by_space;
n_sep_by_space;
p_sign_posn;
n_sign_posn;
*int_curr_symbol;
int_frac_digits;
int_p_cs_precedes;
int_n_cs_precedes;
int_p_sep_by_space;
int_n_sep_by_space;
int_p_sign_posn;
int_n_sign_posn;

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

Library

"."
""
""
""
""
""
""
""
""
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX
""
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX
CHAR_MAX

223

ISO/IEC 9899:201x

3

Committee Draft — April 12, 2011

N1570

The macros defined are NULL (described in 7.19); and
LC_ALL
LC_COLLATE
LC_CTYPE
LC_MONETARY
LC_NUMERIC
LC_TIME
which expand to integer constant expressions with distinct values, suitable for use as the
first argument to the setlocale function.222) Additional macro definitions, beginning
with the characters LC_ and an uppercase letter,223) may also be specified by the
implementation.

7.11.1 Locale control



vim:tw=78:ts=8:ft=help:norl: