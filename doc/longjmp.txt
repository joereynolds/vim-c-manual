*longjmp.txt*
*longjmp*

7.13.2.1 The longjmp function

==============================================================================
Synopsis
1

#include <setjmp.h>
_Noreturn void longjmp(jmp_buf env, int val);

==============================================================================
Description

2

The longjmp function restores the environment saved by the most recent invocation of
the setjmp macro in the same invocation of the program with the corresponding
jmp_buf argument. If there has been no such invocation, or if the invocation was from
another thread of execution, or if the function containing the invocation of the setjmp
macro has terminated execution248) in the interim, or if the invocation of the setjmp
macro was within the scope of an identifier with variably modified type and execution has
left that scope in the interim, the behavior is undefined.

3

All accessible objects have values, and all other components of the abstract machine249)
have state, as of the time the longjmp function was called, except that the values of
objects of automatic storage duration that are local to the function containing the
invocation of the corresponding setjmp macro that do not have volatile-qualified type
and have been changed between the setjmp invocation and longjmp call are
indeterminate.

==============================================================================
Returns

4

After longjmp is completed, thread execution continues as if the corresponding
invocation of the setjmp macro had just returned the value specified by val. The
longjmp function cannot cause the setjmp macro to return the value 0; if val is 0,
the setjmp macro returns the value 1.

5

EXAMPLE The longjmp function that returns control back to the point of the setjmp invocation
might cause memory associated with a variable length array object to be squandered.

248) For example, by executing a return statement or because another longjmp call has caused a
transfer to a setjmp invocation in a function earlier in the set of nested calls.
249) This includes, but is not limited to, the floating-point status flags and the state of open files.

§7.13.2.1

Library

263

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

#include <setjmp.h>
jmp_buf buf;
void g(int n);
void h(int n);
int n = 6;
void f(void)
{
int x[n];
setjmp(buf);
g(n);
}
void g(int n)
{
int a[n];
h(n);
}
void h(int n)
{
int b[n];
longjmp(buf, 2);
}

264

// valid: f is not terminated

// a may remain allocated

// b may remain allocated
// might cause memory loss

Library

§7.13.2.1

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

7.14 Signal handling <signal.h>
1

The header <signal.h> declares a type and two functions and defines several macros,
for handling various signals (conditions that may be reported during program execution).

2

The type defined is
sig_atomic_t
which is the (possibly volatile-qualified) integer type of an object that can be accessed as
an atomic entity, even in the presence of asynchronous interrupts.

3

The macros defined are
SIG_DFL
SIG_ERR
SIG_IGN
which expand to constant expressions with distinct values that have type compatible with
the second argument to, and the return value of, the signal function, and whose values
compare unequal to the address of any declarable function; and the following, which
expand to positive integer constant expressions with type int and distinct values that are
the signal numbers, each corresponding to the specified condition:
SIGABRT abnormal termination, such as is initiated by the abort function
SIGFPE

an erroneous arithmetic operation, such as zero divide or an operation
resulting in overflow

SIGILL

detection of an invalid function image, such as an invalid instruction

SIGINT

receipt of an interactive attention signal

SIGSEGV an invalid access to storage
SIGTERM a termination request sent to the program
4

An implementation need not generate any of these signals, except as a result of explicit
calls to the raise function. Additional signals and pointers to undeclarable functions,
with macro definitions beginning, respectively, with the letters SIG and an uppercase
letter or with SIG_ and an uppercase letter,250) may also be specified by the
implementation. The complete set of signals, their semantics, and their default handling
is implementation-defined; all signal numbers shall be positive.

250) See ‘‘future library directions’’ (7.31.7). The names of the signal numbers reflect the following terms
(respectively): abort, floating-point exception, illegal instruction, interrupt, segmentation violation,
and termination.

§7.14

Library

265

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.14.1 Specify signal handling



vim:tw=78:ts=8:ft=help:norl: