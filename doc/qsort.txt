*qsort.txt*
*qsort*

7.22.5.2 The qsort function

==============================================================================
Synopsis
1

#include <stdlib.h>
void qsort(void *base, size_t nmemb, size_t size,
int (*compar)(const void *, const void *));

==============================================================================
Description

2

The qsort function sorts an array of nmemb objects, the initial element of which is
pointed to by base. The size of each object is specified by size.

3

The contents of the array are sorted into ascending order according to a comparison
function pointed to by compar, which is called with two arguments that point to the
objects being compared. The function shall return an integer less than, equal to, or
greater than zero if the first argument is considered to be respectively less than, equal to,
or greater than the second.

303) In practice, the entire array is sorted according to the comparison function.

§7.22.5.2

Library

355

ISO/IEC 9899:201x

4


N1570

If two elements compare as equal, their order in the resulting sorted array is unspecified.

==============================================================================
Returns

5

The qsort function returns no value.

7.22.6 Integer arithmetic functions
7.22.6.1 The abs, labs and llabs functions

==============================================================================
Synopsis
1

#include <stdlib.h>
int abs(int j);
long int labs(long int j);
long long int llabs(long long int j);

==============================================================================
Description

2

The abs, labs, and llabs functions compute the absolute value of an integer j. If the
result cannot be represented, the behavior is undefined.304)

==============================================================================
Returns

3

The abs, labs, and llabs, functions return the absolute value.

7.22.6.2 The div, ldiv, and lldiv functions

==============================================================================
Synopsis
1

#include <stdlib.h>
div_t div(int numer, int denom);
ldiv_t ldiv(long int numer, long int denom);
lldiv_t lldiv(long long int numer, long long int denom);

==============================================================================
Description

2

The div, ldiv, and lldiv, functions compute numer / denom and numer %
denom in a single operation.

==============================================================================
Returns

3

The div, ldiv, and lldiv functions return a structure of type div_t, ldiv_t, and
lldiv_t, respectively, comprising both the quotient and the remainder. The structures
shall contain (in either order) the members quot (the quotient) and rem (the remainder),
each of which has the same type as the arguments numer and denom. If either part of
the result cannot be represented, the behavior is undefined.

304) The absolute value of the most negative number cannot be represented in two’s complement.

356

Library

§7.22.6.2

N1570



7.22.7 Multibyte/wide character conversion functions
1

The behavior of the multibyte character functions is affected by the LC_CTYPE category
of the current locale. For a state-dependent encoding, each function is placed into its
initial conversion state at program startup and can be returned to that state by a call for
which its character pointer argument, s, is a null pointer. Subsequent calls with s as
other than a null pointer cause the internal conversion state of the function to be altered as
necessary. A call with s as a null pointer causes these functions to return a nonzero value
if encodings have state dependency, and zero otherwise.305) Changing the LC_CTYPE
category causes the conversion state of these functions to be indeterminate.



vim:tw=78:ts=8:ft=help:norl: