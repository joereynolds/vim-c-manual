*c16rtomb.txt*
*c16rtomb*

7.28.1.2 The c16rtomb function

==============================================================================
Synopsis
1

#include <uchar.h>
size_t c16rtomb(char * restrict s, char16_t c16,
mbstate_t * restrict ps);

==============================================================================
Description

2

If s is a null pointer, the c16rtomb function is equivalent to the call
c16rtomb(buf, L'\0', ps)
where buf is an internal buffer.

3

If s is not a null pointer, the c16rtomb function determines the number of bytes needed
to represent the multibyte character that corresponds to the wide character given by c16
(including any shift sequences), and stores the multibyte character representation in the
324) When n has at least the value of the MB_CUR_MAX macro, this case can only occur if s points at a
sequence of redundant shift sequences (for implementations with state-dependent encodings).

§7.28.1.2

Library

399

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

array whose first element is pointed to by s. At most MB_CUR_MAX bytes are stored. If
c16 is a null wide character, a null byte is stored, preceded by any shift sequence needed
to restore the initial shift state; the resulting state described is the initial conversion state.

==============================================================================
Returns
4

The c16rtomb function returns the number of bytes stored in the array object (including
any shift sequences). When c16 is not a valid wide character, an encoding error occurs:
the function stores the value of the macro EILSEQ in errno and returns
(size_t)(-1); the conversion state is unspecified.




vim:tw=78:ts=8:ft=help:norl: