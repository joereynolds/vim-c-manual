7.14.2.1 The raise function
Synopsis
1

#include <signal.h>
int raise(int sig);
Description

2

The raise function carries out the actions described in 7.14.1.1 for the signal sig. If a
signal handler is called, the raise function shall not return until after the signal handler
does.
Returns

3

The raise function returns zero if successful, nonzero if unsuccessful.

§7.14.2.1

Library

267

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.15 Alignment <stdalign.h>
1

The header <stdalign.h> defines four macros.

2

The macro
alignas
expands to _Alignas; the macro
alignof
expands to _Alignof.

3

The remaining macros are suitable for use in #if preprocessing directives. They are
_ _alignas_is_defined
and
_ _alignof_is_defined
which both expand to the integer constant 1.

268

Library

§7.15

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

7.16 Variable arguments <stdarg.h>
1

The header <stdarg.h> declares a type and defines four macros, for advancing
through a list of arguments whose number and types are not known to the called function
when it is translated.

2

A function may be called with a variable number of arguments of varying types. As
described in 6.9.1, its parameter list contains one or more parameters. The rightmost
parameter plays a special role in the access mechanism, and will be designated parmN in
this description.

3

The type declared is
va_list
which is a complete object type suitable for holding information needed by the macros
va_start, va_arg, va_end, and va_copy. If access to the varying arguments is
desired, the called function shall declare an object (generally referred to as ap in this
subclause) having type va_list. The object ap may be passed as an argument to
another function; if that function invokes the va_arg macro with parameter ap, the
value of ap in the calling function is indeterminate and shall be passed to the va_end
macro prior to any further reference to ap.253)

7.16.1 Variable argument list access macros
1

The va_start and va_arg macros described in this subclause shall be implemented
as macros, not functions. It is unspecified whether va_copy and va_end are macros or
identifiers declared with external linkage. If a macro definition is suppressed in order to
access an actual function, or a program defines an external identifier with the same name,
the behavior is undefined. Each invocation of the va_start and va_copy macros
shall be matched by a corresponding invocation of the va_end macro in the same
function.

7.16.1.1 The va_arg macro
Synopsis
1

#include <stdarg.h>
type va_arg(va_list ap, type);
Description

2

The va_arg macro expands to an expression that has the specified type and the value of
the next argument in the call. The parameter ap shall have been initialized by the
va_start or va_copy macro (without an intervening invocation of the va_end
253) It is permitted to create a pointer to a va_list and pass that pointer to another function, in which
case the original function may make further use of the original list after the other function returns.

§7.16.1.1

Library

269

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

macro for the same ap). Each invocation of the va_arg macro modifies ap so that the
values of successive arguments are returned in turn. The parameter type shall be a type
name specified such that the type of a pointer to an object that has the specified type can
be obtained simply by postfixing a * to type. If there is no actual next argument, or if
type is not compatible with the type of the actual next argument (as promoted according
to the default argument promotions), the behavior is undefined, except for the following
cases:
— one type is a signed integer type, the other type is the corresponding unsigned integer
type, and the value is representable in both types;
— one type is pointer to void and the other is a pointer to a character type.
Returns
3

The first invocation of the va_arg macro after that of the va_start macro returns the
value of the argument after that specified by parmN . Successive invocations return the
values of the remaining arguments in succession.

7.16.1.2 The va_copy macro
Synopsis
1

#include <stdarg.h>
void va_copy(va_list dest, va_list src);
Description

2

The va_copy macro initializes dest as a copy of src, as if the va_start macro had
been applied to dest followed by the same sequence of uses of the va_arg macro as
had previously been used to reach the present state of src. Neither the va_copy nor
va_start macro shall be invoked to reinitialize dest without an intervening
invocation of the va_end macro for the same dest.
Returns

3

The va_copy macro returns no value.

7.16.1.3 The va_end macro
Synopsis
1

#include <stdarg.h>
void va_end(va_list ap);
Description

2

The va_end macro facilitates a normal return from the function whose variable
argument list was referred to by the expansion of the va_start macro, or the function
containing the expansion of the va_copy macro, that initialized the va_list ap. The
va_end macro may modify ap so that it is no longer usable (without being reinitialized
270

Library

§7.16.1.3

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

by the va_start or va_copy macro). If there is no corresponding invocation of the
va_start or va_copy macro, or if the va_end macro is not invoked before the
return, the behavior is undefined.
Returns
3

The va_end macro returns no value.

7.16.1.4 The va_start macro
Synopsis
1

#include <stdarg.h>
void va_start(va_list ap, parmN);
Description

2

The va_start macro shall be invoked before any access to the unnamed arguments.

3

The va_start macro initializes ap for subsequent use by the va_arg and va_end
macros. Neither the va_start nor va_copy macro shall be invoked to reinitialize ap
without an intervening invocation of the va_end macro for the same ap.

4

The parameter parmN is the identifier of the rightmost parameter in the variable
parameter list in the function definition (the one just before the , ...). If the parameter
parmN is declared with the register storage class, with a function or array type, or
with a type that is not compatible with the type that results after application of the default
argument promotions, the behavior is undefined.
Returns

5

The va_start macro returns no value.

6

EXAMPLE 1 The function f1 gathers into an array a list of arguments that are pointers to strings (but not
more than MAXARGS arguments), then passes the array as a single argument to function f2. The number of
pointers is specified by the first argument to f1.
#include <stdarg.h>
#define MAXARGS
31
void f1(int n_ptrs, ...)
{
va_list ap;
char *array[MAXARGS];
int ptr_no = 0;

§7.16.1.4

Library

271

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

if (n_ptrs > MAXARGS)
n_ptrs = MAXARGS;
va_start(ap, n_ptrs);
while (ptr_no < n_ptrs)
array[ptr_no++] = va_arg(ap, char *);
va_end(ap);
f2(n_ptrs, array);
}
Each call to f1 is required to have visible the definition of the function or a declaration such as
void f1(int, ...);

7

EXAMPLE 2 The function f3 is similar, but saves the status of the variable argument list after the
indicated number of arguments; after f2 has been called once with the whole list, the trailing part of the list
is gathered again and passed to function f4.
#include <stdarg.h>
#define MAXARGS 31
void f3(int n_ptrs, int f4_after, ...)
{
va_list ap, ap_save;
char *array[MAXARGS];
int ptr_no = 0;
if (n_ptrs > MAXARGS)
n_ptrs = MAXARGS;
va_start(ap, f4_after);
while (ptr_no < n_ptrs) {
array[ptr_no++] = va_arg(ap, char *);
if (ptr_no == f4_after)
va_copy(ap_save, ap);
}
va_end(ap);
f2(n_ptrs, array);
// Now process the saved copy.
n_ptrs -= f4_after;
ptr_no = 0;
while (ptr_no < n_ptrs)
array[ptr_no++] = va_arg(ap_save, char *);
va_end(ap_save);
f4(n_ptrs, array);
}

272

Library

§7.16.1.4

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

7.17 Atomics <stdatomic.h>
7.17.1 Introduction
1

The header <stdatomic.h> defines several macros and declares several types and
functions for performing atomic operations on data shared between threads.254)

2

Implementations that define the macro _ _STDC_NO_ATOMICS_ _ need not provide
this header nor support any of its facilities.

3

The macros defined are the atomic lock-free macros
ATOMIC_BOOL_LOCK_FREE
ATOMIC_CHAR_LOCK_FREE
ATOMIC_CHAR16_T_LOCK_FREE
ATOMIC_CHAR32_T_LOCK_FREE
ATOMIC_WCHAR_T_LOCK_FREE
ATOMIC_SHORT_LOCK_FREE
ATOMIC_INT_LOCK_FREE
ATOMIC_LONG_LOCK_FREE
ATOMIC_LLONG_LOCK_FREE
ATOMIC_POINTER_LOCK_FREE
which indicate the lock-free property of the corresponding atomic types (both signed and
unsigned); and
ATOMIC_FLAG_INIT
which expands to an initializer for an object of type atomic_flag.

4

The types include
memory_order
which is an enumerated type whose enumerators identify memory ordering constraints;
atomic_flag
which is a structure type representing a lock-free, primitive atomic flag; and several ∗
atomic analogs of integer types.

5

In the following synopses:
— An A refers to one of the atomic types.
∗

— A C refers to its corresponding non-atomic type.
— An M refers to the type of the other argument for arithmetic operations. For atomic
integer types, M is C. For atomic pointer types, M is ptrdiff_t.
254) See ‘‘future library directions’’ (7.31.8).

§7.17.1

Library

273

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

— The functions not ending in _explicit have the same semantics as the
corresponding _explicit function with memory_order_seq_cst for the
memory_order argument.
6

NOTE Many operations are volatile-qualified. The ‘‘volatile as device register’’ semantics have not
changed in the standard. This qualification means that volatility is preserved when applying these
operations to volatile objects.

7.17.2 Initialization
7.17.2.1 The ATOMIC_VAR_INIT macro
Synopsis
1

#include <stdatomic.h>
#define ATOMIC_VAR_INIT(C value)
Description

2

The ATOMIC_VAR_INIT macro expands to a token sequence suitable for initializing an
atomic object of a type that is initialization-compatible with value. An atomic object
with automatic storage duration that is not explicitly initialized using
ATOMIC_VAR_INIT is initially in an indeterminate state; however, the default (zero)
initialization for objects with static or thread-local storage duration is guaranteed to
produce a valid state.

3

Concurrent access to the variable being initialized, even via an atomic operation,
constitutes a data race.

4

EXAMPLE
atomic_int guide = ATOMIC_VAR_INIT(42);

7.17.2.2 The atomic_init generic function
Synopsis
1

#include <stdatomic.h>
void atomic_init(volatile A *obj, C value);
Description

2

The atomic_init generic function initializes the atomic object pointed to by obj to
the value value, while also initializing any additional state that the implementation
might need to carry for the atomic object.

3

Although this function initializes an atomic object, it does not avoid data races;
concurrent access to the variable being initialized, even via an atomic operation,
constitutes a data race.

274

Library

§7.17.2.2

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

Returns
4

The atomic_init generic function returns no value.

5

EXAMPLE
atomic_int guide;
atomic_init(&guide, 42);

7.17.3 Order and consistency
1

The enumerated type memory_order specifies the detailed regular (non-atomic)
memory synchronization operations as defined in 5.1.2.4 and may provide for operation
ordering. Its enumeration constants are as follows:255)
memory_order_relaxed
memory_order_consume
memory_order_acquire
memory_order_release
memory_order_acq_rel
memory_order_seq_cst

2

For memory_order_relaxed, no operation orders memory.

3

For
memory_order_release,
memory_order_acq_rel,
and
memory_order_seq_cst, a store operation performs a release operation on the
affected memory location.

4

For
memory_order_acquire,
memory_order_acq_rel,
and
memory_order_seq_cst, a load operation performs an acquire operation on the
affected memory location.

5

For memory_order_consume, a load operation performs a consume operation on the
affected memory location.

6

There shall be a single total order S on all memory_order_seq_cst operations,
consistent with the ‘‘happens before’’ order and modification orders for all affected
locations, such that each memory_order_seq_cst operation B that loads a value
from an atomic object M observes one of the following values:
— the result of the last modification A of M that precedes B in S, if it exists, or
— if A exists, the result of some modification of M in the visible sequence of side
effects with respect to B that is not memory_order_seq_cst and that does not
happen before A, or

255) See ‘‘future library directions’’ (7.31.8).

§7.17.3

Library

275

ISO/IEC 9899:201x

7

Committee Draft — April 12, 2011

N1570

— if A does not exist, the result of some modification of M in the visible sequence of
side effects with respect to B that is not memory_order_seq_cst.
NOTE 1 Although it is not explicitly required that S include lock operations, it can always be extended to
an order that does include lock and unlock operations, since the ordering between those is already included
in the ‘‘happens before’’ ordering.

8

NOTE 2 Atomic operations specifying memory_order_relaxed are relaxed only with respect to
memory ordering. Implementations must still guarantee that any given atomic access to a particular atomic
object be indivisible with respect to all other atomic accesses to that object.

9

For an atomic operation B that reads the value of an atomic object M, if there is a
memory_order_seq_cst fence X sequenced before B, then B observes either the
last memory_order_seq_cst modification of M preceding X in the total order S or
a later modification of M in its modification order.

10

For atomic operations A and B on an atomic object M, where A modifies M and B takes
its value, if there is a memory_order_seq_cst fence X such that A is sequenced
before X and B follows X in S, then B observes either the effects of A or a later
modification of M in its modification order.

11

For atomic operations A and B on an atomic object M, where A modifies M and B takes
its value, if there are memory_order_seq_cst fences X and Y such that A is
sequenced before X, Y is sequenced before B, and X precedes Y in S, then B observes
either the effects of A or a later modification of M in its modification order.

12

Atomic read-modify-write operations shall always read the last value (in the modification
order) stored before the write associated with the read-modify-write operation.

13

An atomic store shall only store a value that has been computed from constants and
program input values by a finite sequence of program evaluations, such that each
evaluation observes the values of variables as computed by the last prior assignment in
the sequence.256) The ordering of evaluations in this sequence shall be such that
— If an evaluation B observes a value computed by A in a different thread, then B does
not happen before A.
— If an evaluation A is included in the sequence, then all evaluations that assign to the
same variable and happen before A are also included.

14

NOTE 3 The second requirement disallows ‘‘out-of-thin-air’’, or ‘‘speculative’’ stores of atomics when
relaxed atomics are used. Since unordered operations are involved, evaluations may appear in this
sequence out of thread order. For example, with x and y initially zero,

256) Among other implications, atomic variables shall not decay.

276

Library

§7.17.3

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

// Thread 1:
r1 = atomic_load_explicit(&y, memory_order_relaxed);
atomic_store_explicit(&x, r1, memory_order_relaxed);
// Thread 2:
r2 = atomic_load_explicit(&x, memory_order_relaxed);
atomic_store_explicit(&y, 42, memory_order_relaxed);
is allowed to produce r1 == 42 && r2 == 42. The sequence of evaluations justifying this consists of:
atomic_store_explicit(&y, 42,
r1 = atomic_load_explicit(&y,
atomic_store_explicit(&x, r1,
r2 = atomic_load_explicit(&x,

memory_order_relaxed);
memory_order_relaxed);
memory_order_relaxed);
memory_order_relaxed);

On the other hand,
// Thread 1:
r1 = atomic_load_explicit(&y, memory_order_relaxed);
atomic_store_explicit(&x, r1, memory_order_relaxed);
// Thread 2:
r2 = atomic_load_explicit(&x, memory_order_relaxed);
atomic_store_explicit(&y, r2, memory_order_relaxed);
is not allowed to produce r1 == 42 && r2 = 42, since there is no sequence of evaluations that results
in the computation of 42. In the absence of ‘‘relaxed’’ operations and read-modify-write operations with
weaker than memory_order_acq_rel ordering, the second requirement has no impact.

Recommended practice
15

The requirements do not forbid r1 == 42 && r2 == 42 in the following example,
with x and y initially zero:
// Thread 1:
r1 = atomic_load_explicit(&x, memory_order_relaxed);
if (r1 == 42)
atomic_store_explicit(&y, r1, memory_order_relaxed);
// Thread 2:
r2 = atomic_load_explicit(&y, memory_order_relaxed);
if (r2 == 42)
atomic_store_explicit(&x, 42, memory_order_relaxed);
However, this is not useful behavior, and implementations should not allow it.

16

Implementations should make atomic stores visible to atomic loads within a reasonable
amount of time.

§7.17.3

Library

277

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.17.3.1 The kill_dependency macro
Synopsis
1

#include <stdatomic.h>
type kill_dependency(type y);
Description

2

The kill_dependency macro terminates a dependency chain; the argument does not
carry a dependency to the return value.
Returns

3

The kill_dependency macro returns the value of y.

7.17.4 Fences
1

This subclause introduces synchronization primitives called fences. Fences can have
acquire semantics, release semantics, or both. A fence with acquire semantics is called
an acquire fence; a fence with release semantics is called a release fence.

2

A release fence A synchronizes with an acquire fence B if there exist atomic operations
X and Y , both operating on some atomic object M, such that A is sequenced before X, X
modifies M, Y is sequenced before B, and Y reads the value written by X or a value
written by any side effect in the hypothetical release sequence X would head if it were a
release operation.

3

A release fence A synchronizes with an atomic operation B that performs an acquire
operation on an atomic object M if there exists an atomic operation X such that A is
sequenced before X, X modifies M, and B reads the value written by X or a value written
by any side effect in the hypothetical release sequence X would head if it were a release
operation.

4

An atomic operation A that is a release operation on an atomic object M synchronizes
with an acquire fence B if there exists some atomic operation X on M such that X is
sequenced before B and reads the value written by A or a value written by any side effect
in the release sequence headed by A.

