*strftime.txt*
*strftime*
7.27.3.5 The strftime function
Synopsis
1

#include <time.h>
size_t strftime(char * restrict s,
size_t maxsize,
const char * restrict format,
const struct tm * restrict timeptr);
Description

2

The strftime function places characters into the array pointed to by s as controlled by
the string pointed to by format. The format shall be a multibyte character sequence,
beginning and ending in its initial shift state. The format string consists of zero or
more conversion specifiers and ordinary multibyte characters. A conversion specifier
consists of a % character, possibly followed by an E or O modifier character (described
below), followed by a character that determines the behavior of the conversion specifier.
All ordinary multibyte characters (including the terminating null character) are copied
unchanged into the array. If copying takes place between objects that overlap, the
behavior is undefined. No more than maxsize characters are placed into the array.

3

Each conversion specifier is replaced by appropriate characters as described in the
following list. The appropriate characters are determined using the LC_TIME category
394

Library

§7.27.3.5

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

of the current locale and by the values of zero or more members of the broken-down time
structure pointed to by timeptr, as specified in brackets in the description. If any of
the specified values is outside the normal range, the characters stored are unspecified.
%a
%A
%b
%B
%c
%C
%d
%D
%e
%F
%g
%G
%h
%H
%I
%j
%m
%M
%n
%p
%r
%R
%S
%t
%T
%u
%U
%V

is replaced by the locale’s abbreviated weekday name. [tm_wday]
is replaced by the locale’s full weekday name. [tm_wday]
is replaced by the locale’s abbreviated month name. [tm_mon]
is replaced by the locale’s full month name. [tm_mon]
is replaced by the locale’s appropriate date and time representation. [all specified
in 7.27.1]
is replaced by the year divided by 100 and truncated to an integer, as a decimal
number (00−99). [tm_year]
is replaced by the day of the month as a decimal number (01−31). [tm_mday]
is equivalent to ‘‘%m/%d/%y’’. [tm_mon, tm_mday, tm_year]
is replaced by the day of the month as a decimal number (1−31); a single digit is
preceded by a space. [tm_mday]
is equivalent to ‘‘%Y−%m−%d’’ (the ISO 8601 date format). [tm_year, tm_mon,
tm_mday]
is replaced by the last 2 digits of the week-based year (see below) as a decimal
number (00−99). [tm_year, tm_wday, tm_yday]
is replaced by the week-based year (see below) as a decimal number (e.g., 1997).
[tm_year, tm_wday, tm_yday]
is equivalent to ‘‘%b’’. [tm_mon]
is replaced by the hour (24-hour clock) as a decimal number (00−23). [tm_hour]
is replaced by the hour (12-hour clock) as a decimal number (01−12). [tm_hour]
is replaced by the day of the year as a decimal number (001−366). [tm_yday]
is replaced by the month as a decimal number (01−12). [tm_mon]
is replaced by the minute as a decimal number (00−59). [tm_min]
is replaced by a new-line character.
is replaced by the locale’s equivalent of the AM/PM designations associated with a
12-hour clock. [tm_hour]
is replaced by the locale’s 12-hour clock time. [tm_hour, tm_min, tm_sec]
is equivalent to ‘‘%H:%M’’. [tm_hour, tm_min]
is replaced by the second as a decimal number (00−60). [tm_sec]
is replaced by a horizontal-tab character.
is equivalent to ‘‘%H:%M:%S’’ (the ISO 8601 time format). [tm_hour, tm_min,
tm_sec]
is replaced by the ISO 8601 weekday as a decimal number (1−7), where Monday
is 1. [tm_wday]
is replaced by the week number of the year (the first Sunday as the first day of week
1) as a decimal number (00−53). [tm_year, tm_wday, tm_yday]
is replaced by the ISO 8601 week number (see below) as a decimal number

§7.27.3.5

Library

395

ISO/IEC 9899:201x

%w
%W
%x
%X
%y
%Y
%z

%Z
%%
4

Committee Draft — April 12, 2011

N1570

(01−53). [tm_year, tm_wday, tm_yday]
is replaced by the weekday as a decimal number (0−6), where Sunday is 0.
[tm_wday]
is replaced by the week number of the year (the first Monday as the first day of
week 1) as a decimal number (00−53). [tm_year, tm_wday, tm_yday]
is replaced by the locale’s appropriate date representation. [all specified in 7.27.1]
is replaced by the locale’s appropriate time representation. [all specified in 7.27.1]
is replaced by the last 2 digits of the year as a decimal number (00−99).
[tm_year]
is replaced by the year as a decimal number (e.g., 1997). [tm_year]
is replaced by the offset from UTC in the ISO 8601 format ‘‘−0430’’ (meaning 4
hours 30 minutes behind UTC, west of Greenwich), or by no characters if no time
zone is determinable. [tm_isdst]
is replaced by the locale’s time zone name or abbreviation, or by no characters if no
time zone is determinable. [tm_isdst]
is replaced by %.

Some conversion specifiers can be modified by the inclusion of an E or O modifier
character to indicate an alternative format or specification. If the alternative format or
specification does not exist for the current locale, the modifier is ignored.
%Ec is replaced by the locale’s alternative date and time representation.
%EC is replaced by the name of the base year (period) in the locale’s alternative
representation.
%Ex is replaced by the locale’s alternative date representation.
%EX is replaced by the locale’s alternative time representation.
%Ey is replaced by the offset from %EC (year only) in the locale’s alternative
representation.
%EY is replaced by the locale’s full alternative year representation.
%Od is replaced by the day of the month, using the locale’s alternative numeric symbols
(filled as needed with leading zeros, or with leading spaces if there is no alternative
symbol for zero).
%Oe is replaced by the day of the month, using the locale’s alternative numeric symbols
(filled as needed with leading spaces).
%OH is replaced by the hour (24-hour clock), using the locale’s alternative numeric
symbols.
%OI is replaced by the hour (12-hour clock), using the locale’s alternative numeric
symbols.
%Om is replaced by the month, using the locale’s alternative numeric symbols.
%OM is replaced by the minutes, using the locale’s alternative numeric symbols.
%OS is replaced by the seconds, using the locale’s alternative numeric symbols.
%Ou is replaced by the ISO 8601 weekday as a number in the locale’s alternative
396

Library

§7.27.3.5

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

representation, where Monday is 1.
%OU is replaced by the week number, using the locale’s alternative numeric symbols.
%OV is replaced by the ISO 8601 week number, using the locale’s alternative numeric
symbols.
%Ow is replaced by the weekday as a number, using the locale’s alternative numeric
symbols.
%OW is replaced by the week number of the year, using the locale’s alternative numeric
symbols.
%Oy is replaced by the last 2 digits of the year, using the locale’s alternative numeric
symbols.
5

%g, %G, and %V give values according to the ISO 8601 week-based year. In this system,
weeks begin on a Monday and week 1 of the year is the week that includes January 4th,
which is also the week that includes the first Thursday of the year, and is also the first
week that contains at least four days in the year. If the first Monday of January is the
2nd, 3rd, or 4th, the preceding days are part of the last week of the preceding year; thus,
for Saturday 2nd January 1999, %G is replaced by 1998 and %V is replaced by 53. If
December 29th, 30th, or 31st is a Monday, it and any following days are part of week 1 of
the following year. Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and
%V is replaced by 01.

6

If a conversion specifier is not one of the above, the behavior is undefined.

7

In the "C" locale, the E and O modifiers are ignored and the replacement strings for the
following specifiers are:
%a
%A
%b
%B
%c
%p
%r
%x
%X
%Z

the first three characters of %A.
one of ‘‘Sunday’’, ‘‘Monday’’, ... , ‘‘Saturday’’.
the first three characters of %B.
one of ‘‘January’’, ‘‘February’’, ... , ‘‘December’’.
equivalent to ‘‘%a %b %e %T %Y’’.
one of ‘‘AM’’ or ‘‘PM’’.
equivalent to ‘‘%I:%M:%S %p’’.
equivalent to ‘‘%m/%d/%y’’.
equivalent to %T.
implementation-defined.

Returns
8

If the total number of resulting characters including the terminating null character is not
more than maxsize, the strftime function returns the number of characters placed
into the array pointed to by s not including the terminating null character. Otherwise,
zero is returned and the contents of the array are indeterminate.

§7.27.3.5

Library

397

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.28 Unicode utilities <uchar.h>
1

The header <uchar.h> declares types and functions for manipulating Unicode
characters.

2

The types declared are mbstate_t (described in 7.30.1) and size_t (described in
7.19);
char16_t
which is an unsigned integer type used for 16-bit characters and is the same type as
uint_least16_t (described in 7.20.1.2); and
char32_t
which is an unsigned integer type used for 32-bit characters and is the same type as
uint_least32_t (also described in 7.20.1.2).

7.28.1 Restartable multibyte/wide character conversion functions
1

These functions have a parameter, ps, of type pointer to mbstate_t that points to an
object that can completely describe the current conversion state of the associated
multibyte character sequence, which the functions alter as necessary. If ps is a null
pointer, each function uses its own internal mbstate_t object instead, which is
initialized at program startup to the initial conversion state; the functions are not required
to avoid data races with other calls to the same function in this case. The implementation
behaves as if no library function calls these functions with a null pointer for ps.



vim:tw=78:ts=8:ft=help:norl: