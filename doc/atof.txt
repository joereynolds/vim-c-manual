*atof.txt*
*atof*

7.22.1.1 The atof function

==============================================================================
Synopsis
1

#include <stdlib.h>
double atof(const char *nptr);

==============================================================================
Description

2

The atof function converts the initial portion of the string pointed to by nptr to
double representation. Except for the behavior on error, it is equivalent to
strtod(nptr, (char **)NULL)

==============================================================================
Returns

3

The atof function returns the converted value.
Forward references: the strtod, strtof, and strtold functions (7.22.1.3).

7.22.1.2 The atoi, atol, and atoll functions

==============================================================================
Synopsis
1

#include <stdlib.h>
int atoi(const char *nptr);
long int atol(const char *nptr);
long long int atoll(const char *nptr);

==============================================================================
Description

2

The atoi, atol, and atoll functions convert the initial portion of the string pointed
to by nptr to int, long int, and long long int representation, respectively.
Except for the behavior on error, they are equivalent to
atoi: (int)strtol(nptr, (char **)NULL, 10)
atol: strtol(nptr, (char **)NULL, 10)
atoll: strtoll(nptr, (char **)NULL, 10)

==============================================================================
Returns

3

The atoi, atol, and atoll functions return the converted value.
Forward references: the strtol, strtoll, strtoul, and strtoull functions
(7.22.1.4).

§7.22.1.2

Library

341

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.22.1.3 The strtod, strtof, and strtold functions

==============================================================================
Synopsis
1

#include <stdlib.h>
double strtod(const char * restrict nptr,
char ** restrict endptr);
float strtof(const char * restrict nptr,
char ** restrict endptr);
long double strtold(const char * restrict nptr,
char ** restrict endptr);

==============================================================================
Description

2

The strtod, strtof, and strtold functions convert the initial portion of the string
pointed to by nptr to double, float, and long double representation,
respectively. First, they decompose the input string into three parts: an initial, possibly
empty, sequence of white-space characters (as specified by the isspace function), a
subject sequence resembling a floating-point constant or representing an infinity or NaN;
and a final string of one or more unrecognized characters, including the terminating null
character of the input string. Then, they attempt to convert the subject sequence to a
floating-point number, and return the result.

3

The expected form of the subject sequence is an optional plus or minus sign, then one of
the following:
— a nonempty sequence of decimal digits optionally containing a decimal-point
character, then an optional exponent part as defined in 6.4.4.2;
— a 0x or 0X, then a nonempty sequence of hexadecimal digits optionally containing a
decimal-point character, then an optional binary exponent part as defined in 6.4.4.2;
— INF or INFINITY, ignoring case
— NAN or NAN(n-char-sequenceopt), ignoring case in the NAN part, where:
n-char-sequence:
digit
nondigit
n-char-sequence digit
n-char-sequence nondigit
The subject sequence is defined as the longest initial subsequence of the input string,
starting with the first non-white-space character, that is of the expected form. The subject
sequence contains no characters if the input string is not of the expected form.

4

If the subject sequence has the expected form for a floating-point number, the sequence of
characters starting with the first digit or the decimal-point character (whichever occurs
first) is interpreted as a floating constant according to the rules of 6.4.4.2, except that the
342
Library
§7.22.1.3

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

decimal-point character is used in place of a period, and that if neither an exponent part
nor a decimal-point character appears in a decimal floating point number, or if a binary
exponent part does not appear in a hexadecimal floating point number, an exponent part
of the appropriate type with value zero is assumed to follow the last digit in the string. If
the subject sequence begins with a minus sign, the sequence is interpreted as negated.292)
A character sequence INF or INFINITY is interpreted as an infinity, if representable in
the return type, else like a floating constant that is too large for the range of the return
type. A character sequence NAN or NAN(n-char-sequenceopt) is interpreted as a quiet
NaN, if supported in the return type, else like a subject sequence part that does not have
the expected form; the meaning of the n-char sequence is implementation-defined.293) A
pointer to the final string is stored in the object pointed to by endptr, provided that
endptr is not a null pointer.
5

If the subject sequence has the hexadecimal form and FLT_RADIX is a power of 2, the
value resulting from the conversion is correctly rounded.

6

In other than the "C" locale, additional locale-specific subject sequence forms may be
accepted.

7

If the subject sequence is empty or does not have the expected form, no conversion is
performed; the value of nptr is stored in the object pointed to by endptr, provided
that endptr is not a null pointer.
Recommended practice

8

If the subject sequence has the hexadecimal form, FLT_RADIX is not a power of 2, and
the result is not exactly representable, the result should be one of the two numbers in the
appropriate internal format that are adjacent to the hexadecimal floating source value,
with the extra stipulation that the error should have a correct sign for the current rounding
direction.

9

If the subject sequence has the decimal form and at most DECIMAL_DIG (defined in
<float.h>) significant digits, the result should be correctly rounded. If the subject
sequence D has the decimal form and more than DECIMAL_DIG significant digits,
consider the two bounding, adjacent decimal strings L and U, both having
DECIMAL_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.
The result should be one of the (equal or adjacent) values that would be obtained by
correctly rounding L and U according to the current rounding direction, with the extra
292) It is unspecified whether a minus-signed sequence is converted to a negative number directly or by
negating the value resulting from converting the corresponding unsigned sequence (see F.5); the two
methods may yield different results if rounding is toward positive or negative infinity. In either case,
the functions honor the sign of zero if floating-point arithmetic supports signed zeros.
293) An implementation may use the n-char sequence to determine extra information to be represented in
the NaN’s significand.

§7.22.1.3

Library

343

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

stipulation that the error with respect to D should have a correct sign for the current
rounding direction.294)

==============================================================================
Returns
10

The functions return the converted value, if any. If no conversion could be performed,
zero is returned. If the correct value overflows and default rounding is in effect (7.12.1),
plus or minus HUGE_VAL, HUGE_VALF, or HUGE_VALL is returned (according to the
return type and sign of the value), and the value of the macro ERANGE is stored in
errno. If the result underflows (7.12.1), the functions return a value whose magnitude is
no greater than the smallest normalized positive number in the return type; whether
errno acquires the value ERANGE is implementation-defined.

7.22.1.4 The strtol, strtoll, strtoul, and strtoull functions

==============================================================================
Synopsis
1

#include <stdlib.h>
long int strtol(
const char * restrict nptr,
char ** restrict endptr,
int base);
long long int strtoll(
const char * restrict nptr,
char ** restrict endptr,
int base);
unsigned long int strtoul(
const char * restrict nptr,
char ** restrict endptr,
int base);
unsigned long long int strtoull(
const char * restrict nptr,
char ** restrict endptr,
int base);

==============================================================================
Description

2

The strtol, strtoll, strtoul, and strtoull functions convert the initial
portion of the string pointed to by nptr to long int, long long int, unsigned
long int, and unsigned long long int representation, respectively. First,
they decompose the input string into three parts: an initial, possibly empty, sequence of
white-space characters (as specified by the isspace function), a subject sequence
294) DECIMAL_DIG, defined in <float.h>, should be sufficiently large that L and U will usually round
to the same internal floating value, but if not will round to adjacent values.

344

Library

§7.22.1.4

N1570

Committee Draft — April 12, 2011

ISO/IEC 9899:201x

resembling an integer represented in some radix determined by the value of base, and a
final string of one or more unrecognized characters, including the terminating null
character of the input string. Then, they attempt to convert the subject sequence to an
integer, and return the result.
3

If the value of base is zero, the expected form of the subject sequence is that of an
integer constant as described in 6.4.4.1, optionally preceded by a plus or minus sign, but
not including an integer suffix. If the value of base is between 2 and 36 (inclusive), the
expected form of the subject sequence is a sequence of letters and digits representing an
integer with the radix specified by base, optionally preceded by a plus or minus sign,
but not including an integer suffix. The letters from a (or A) through z (or Z) are
ascribed the values 10 through 35; only letters and digits whose ascribed values are less
than that of base are permitted. If the value of base is 16, the characters 0x or 0X may
optionally precede the sequence of letters and digits, following the sign if present.

4

The subject sequence is defined as the longest initial subsequence of the input string,
starting with the first non-white-space character, that is of the expected form. The subject
sequence contains no characters if the input string is empty or consists entirely of white
space, or if the first non-white-space character is other than a sign or a permissible letter
or digit.

5

If the subject sequence has the expected form and the value of base is zero, the sequence
of characters starting with the first digit is interpreted as an integer constant according to
the rules of 6.4.4.1. If the subject sequence has the expected form and the value of base
is between 2 and 36, it is used as the base for conversion, ascribing to each letter its value
as given above. If the subject sequence begins with a minus sign, the value resulting from
the conversion is negated (in the return type). A pointer to the final string is stored in the
object pointed to by endptr, provided that endptr is not a null pointer.

6

In other than the "C" locale, additional locale-specific subject sequence forms may be
accepted.

7

If the subject sequence is empty or does not have the expected form, no conversion is
performed; the value of nptr is stored in the object pointed to by endptr, provided
that endptr is not a null pointer.

==============================================================================
Returns

8

The strtol, strtoll, strtoul, and strtoull functions return the converted
value, if any. If no conversion could be performed, zero is returned. If the correct value
is outside the range of representable values, LONG_MIN, LONG_MAX, LLONG_MIN,
LLONG_MAX, ULONG_MAX, or ULLONG_MAX is returned (according to the return type
and sign of the value, if any), and the value of the macro ERANGE is stored in errno.

§7.22.1.4

Library

345

ISO/IEC 9899:201x

Committee Draft — April 12, 2011

N1570

7.22.2 Pseudo-random sequence generation functions



vim:tw=78:ts=8:ft=help:norl: